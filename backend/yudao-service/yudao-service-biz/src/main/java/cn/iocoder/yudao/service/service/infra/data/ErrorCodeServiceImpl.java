package cn.iocoder.yudao.service.service.infra.data;

import cn.hutool.core.collection.CollUtil;
import cn.iocoder.yudao.framework.common.pojo.PageResult;
import cn.iocoder.yudao.service.api.infra.errorcode.dto.ErrorCodeAutoGenerateReqDTO;
import cn.iocoder.yudao.service.api.infra.errorcode.dto.ErrorCodeRespDTO;
import cn.iocoder.yudao.service.convert.infra.dict.ErrorCodeConvert;
import cn.iocoder.yudao.service.enums.infra.errorcode.ErrorCodeTypeEnum;
import cn.iocoder.yudao.service.model.infra.data.SystemErrorCode;
import cn.iocoder.yudao.service.model.infra.data.SystemErrorCodeDraft;
import cn.iocoder.yudao.service.repository.infra.data.SystemErrorCodeRepository;
import cn.iocoder.yudao.service.vo.infra.errorcode.*;
import com.google.common.annotations.VisibleForTesting;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import javax.annotation.Resource;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import static cn.iocoder.yudao.framework.common.exception.util.ServiceExceptionUtil.exception;
import static cn.iocoder.yudao.framework.common.util.collection.CollectionUtils.*;
import static cn.iocoder.yudao.service.enums.system.ErrorCodeConstants.ERROR_CODE_DUPLICATE;
import static cn.iocoder.yudao.service.enums.system.ErrorCodeConstants.ERROR_CODE_NOT_EXISTS;

/**
 * 错误码 Service 实现类
 *
 * @author dlyan
 */
@Service
@Validated
@Slf4j
public class ErrorCodeServiceImpl implements ErrorCodeService {

    @Resource
    private SystemErrorCodeRepository systemErrorCodeRepository;

    @Override
    public Long createErrorCode(ErrorCodeCreateReqVO createReqVO) {
        // 校验 code 重复
        validateCodeDuplicate(createReqVO.getCode(), null);

        // 插入
        SystemErrorCode errorCode = ErrorCodeConvert.INSTANCE.convert(createReqVO);
        errorCode = SystemErrorCodeDraft.$.produce(errorCode, SystemErrorCode -> {
            SystemErrorCode.setType(ErrorCodeTypeEnum.MANUAL_OPERATION.getType());
        });
        errorCode = systemErrorCodeRepository.insert(errorCode);
        // 返回
        return errorCode.id();
    }

    @Override
    public void updateErrorCode(ErrorCodeUpdateReqVO updateReqVO) {
        // 校验存在
        validateErrorCodeExists(updateReqVO.getId());
        // 校验 code 重复
        validateCodeDuplicate(updateReqVO.getCode(), updateReqVO.getId());

        // 更新
        SystemErrorCode errorCode = ErrorCodeConvert.INSTANCE.convert(updateReqVO);
        errorCode = SystemErrorCodeDraft.$.produce(errorCode, SystemErrorCode -> {
            SystemErrorCode.setType(ErrorCodeTypeEnum.MANUAL_OPERATION.getType());
        });
        systemErrorCodeRepository.update(errorCode);
    }

    @Override
    public void deleteErrorCode(Long id) {
        // 校验存在
        validateErrorCodeExists(id);
        // 删除
        systemErrorCodeRepository.deleteById(id);
    }

    /**
     * 校验错误码的唯一字段是否重复
     *
     * 是否存在相同编码的错误码
     *
     * @param code 错误码编码
     * @param id 错误码编号
     */
    @VisibleForTesting
    public void validateCodeDuplicate(Integer code, Long id) {
        Optional<SystemErrorCode> opSystemErrorCode = systemErrorCodeRepository.findByCode(code);
        if (!opSystemErrorCode.isPresent()) {
            return;
        }
        // 如果 id 为空，说明不用比较是否为相同 id 的错误码
        if (id == null) {
            throw exception(ERROR_CODE_DUPLICATE);
        }
        if (opSystemErrorCode.get().id() != id) {
            throw exception(ERROR_CODE_DUPLICATE);
        }
    }

    @VisibleForTesting
    void validateErrorCodeExists(Long id) {
        if (!systemErrorCodeRepository.findById(id).isPresent()) {
            throw exception(ERROR_CODE_NOT_EXISTS);
        }
    }

    @Override
    public SystemErrorCode getErrorCode(Long id) {
        return systemErrorCodeRepository.findById(id).get();
    }

    @Override
    public PageResult<ErrorCodeRespVO> getErrorCodePage(ErrorCodePageReqVO pageReqVO) {
        Page<SystemErrorCode> postPage = systemErrorCodeRepository.selectPage(pageReqVO);
        List<ErrorCodeRespVO> postList =  ErrorCodeConvert.INSTANCE.convertPage(postPage);
        return new PageResult<>(postList, postPage.getTotalElements());
    }

    @Override
    public List<SystemErrorCode> getErrorCodeList(ErrorCodeExportReqVO exportReqVO) {
        return systemErrorCodeRepository.selectList(exportReqVO);
    }

    @Override
    @Transactional
    public void autoGenerateErrorCodes(List<ErrorCodeAutoGenerateReqDTO> autoGenerateDTOs) {
        if (CollUtil.isEmpty(autoGenerateDTOs)) {
            return;
        }
        // 获得错误码
        List<SystemErrorCode> SystemErrorCodes = systemErrorCodeRepository.findByCodeIn(
                convertList(autoGenerateDTOs, ErrorCodeAutoGenerateReqDTO::getCode));
        Map<Integer, SystemErrorCode> SystemErrorCodeMap = convertMap(SystemErrorCodes, SystemErrorCode::code);

        // 遍历 autoGenerateBOs 数组，逐个插入或更新。考虑到每次量级不大，就不走批量了
        autoGenerateDTOs.forEach(autoGenerateDTO -> {
            SystemErrorCode systemErrorCode = SystemErrorCodeMap.get(autoGenerateDTO.getCode());
            // 不存在，则进行新增
            if (systemErrorCode == null) {
                systemErrorCode = ErrorCodeConvert.INSTANCE.convert(autoGenerateDTO);
                systemErrorCode = SystemErrorCodeDraft.$.produce(systemErrorCode, SystemErrorCode -> {
                    SystemErrorCode.setType(ErrorCodeTypeEnum.AUTO_GENERATION.getType());
                });

                systemErrorCodeRepository.insert(systemErrorCode);
                return;
            }
            // 存在，则进行更新。更新有三个前置条件：
            // 条件 1. 只更新自动生成的错误码，即 Type 为 ErrorCodeTypeEnum.AUTO_GENERATION
            if (!ErrorCodeTypeEnum.AUTO_GENERATION.getType().equals(systemErrorCode.type())) {
                return;
            }
            // 条件 2. 分组 applicationName 必须匹配，避免存在错误码冲突的情况
            if (!autoGenerateDTO.getApplicationName().equals(systemErrorCode.applicationName())) {
                log.error("[autoGenerateErrorCodes][自动创建({}/{}) 错误码失败，数据库中已经存在({}/{})]",
                        autoGenerateDTO.getCode(), autoGenerateDTO.getApplicationName(),
                        systemErrorCode.code(), systemErrorCode.applicationName());
                return;
            }
            // 条件 3. 错误提示语存在差异
            if (autoGenerateDTO.getMessage().equals(systemErrorCode.message())) {
                return;
            }
            // 最终匹配，进行更新
            SystemErrorCode finalSystemErrorCode = systemErrorCode;
            systemErrorCodeRepository.update(SystemErrorCodeDraft.$.produce(SystemErrorCode->{
                SystemErrorCode
                        .setId(finalSystemErrorCode.id())
                        .setMessage(autoGenerateDTO.getMessage());
            }));
        });
    }

    @Override
    public List<ErrorCodeRespDTO> getErrorCodeList(String applicationName, LocalDateTime minUpdateTime) {
        List<SystemErrorCode> SystemErrorCodes = systemErrorCodeRepository.findByApplicationNameAndUpdateTime(applicationName, minUpdateTime);
        return ErrorCodeConvert.INSTANCE.convertList03(SystemErrorCodes);
    }

}

